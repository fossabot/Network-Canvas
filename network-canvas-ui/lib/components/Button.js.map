{"version":3,"sources":["../../src/components/Button.js"],"names":["Button","props","icon","iconPosition","iconClassNames","iconElement","Icon","require","default","cloneElement","className","color","size","buttonClassNames","renderButtonIcon","children","content","propTypes","oneOfType","string","element","node","object","oneOf"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEMA,M;;;;;;;;;;;uCAmBe;AAAA,mBACc,KAAKC,KADnB;AAAA,UACTC,IADS,UACTA,IADS;AAAA,UACHC,YADG,UACHA,YADG;;;AAGjB,UAAMC,iBAAiB,0BAAG;AACxB,wBAAgB,IADQ;AAExB,+BAAuBD,iBAAiB;AAFhB,OAAH,CAAvB;;AAKA,UAAIE,cAAc,IAAlB;AACA,UAAIH,IAAJ,EAAU;AACR,YAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,cAAMI,OAAOC,QAAQ,QAAR,EAAkBC,OAA/B;AACAH,wBAAc,8BAAC,IAAD,IAAM,MAAMH,IAAZ,EAAkB,WAAWE,cAA7B,GAAd;AACD,SAHD,MAGO;AACLC,wBAAc,gBAAMI,YAAN,CACZ,KAAKR,KAAL,CAAWC,IADC,EAEZ,EAAEQ,WAAWN,cAAb,EAFY,CAAd;AAID;AACF;AACD,aAAOC,WAAP;AACD;;;6BAEQ;AAAA;;AAAA,oBACiB,KAAKJ,KADtB;AAAA,UACCU,KADD,WACCA,KADD;AAAA,UACQC,IADR,WACQA,IADR;;;AAGP,UAAMC,mBAAmB;AACvB,kBAAU;AADa,2CAEXF,KAFW,EAED,CAAC,CAACA,KAFD,qCAGXC,IAHW,EAGF,CAAC,CAACA,IAHA,QAAzB;;AAMA,aACE;AAAA;AAAA,UAAQ,WAAWC,gBAAnB;AACG,aAAKC,gBAAL,EADH;AAEE;AAAA;AAAA,YAAM,WAAU,iBAAhB;AAAmC,eAAKb,KAAL,CAAWc,QAAX,IAAuB,KAAKd,KAAL,CAAWe;AAArE;AAFF,OADF;AAMD;;;;;;AAzDGhB,M,CACGiB,S,GAAY;AACjBD,WAAS,oBAAUE,SAAV,CAAoB,CAC3B,oBAAUC,MADiB,EAE3B,oBAAUC,OAFiB,CAApB,CADQ;AAKjBL,YAAU,oBAAUM,IALH;AAMjBnB,QAAM,oBAAUgB,SAAV,CAAoB,CACxB,oBAAUC,MADc,EAExB,oBAAUC,OAFc,EAGxB,oBAAUE,MAHc,CAApB,CANW;AAWjBnB,gBAAc,oBAAUoB,KAAV,CAAgB,CAC5B,MAD4B,EACpB,OADoB,CAAhB,CAXG;AAcjBX,QAAM,oBAAUO,MAdC;AAejBR,SAAO,oBAAUQ;AAfA,C;kBA2DNnB,M","file":"Button.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nclass Button extends Component {\n  static propTypes = {\n    content: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.element\n    ]),\n    children: PropTypes.node,\n    icon: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.element,\n      PropTypes.object\n    ]),\n    iconPosition: PropTypes.oneOf([\n      'left', 'right'\n    ]),\n    size: PropTypes.string,\n    color: PropTypes.string\n  }\n\n  renderButtonIcon() {\n    const { icon, iconPosition } = this.props;\n\n    const iconClassNames = cx({\n      'button__icon': true,\n      'button__icon--right': iconPosition === 'right'\n    });\n\n    let iconElement = null;\n    if (icon) {\n      if (typeof icon === 'string') {\n        const Icon = require('./Icon').default;\n        iconElement = <Icon name={icon} className={iconClassNames} />;\n      } else {\n        iconElement = React.cloneElement(\n          this.props.icon,\n          { className: iconClassNames }\n        );\n      }\n    }\n    return iconElement;\n  }\n\n  render() {\n    const { color, size } = this.props;\n\n    const buttonClassNames = cx({\n      'button': true,\n      [`button--${color}`]: !!color,\n      [`button--${size}`]: !!size\n    });\n\n    return (\n      <button className={buttonClassNames}>\n        {this.renderButtonIcon()}\n        <span className=\"button__content\">{this.props.children || this.props.content}</span>\n      </button>\n    );\n  }\n}\n\nexport default Button;\n"]}