exports[`<Alphanumeric /> should render 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="input__container">
    <input
        className="input"
        input={
            Object {
                "name": "alphanumeric_name",
                "value": null,
              }
        }
        meta={
            Object {
                "error": "an error message",
                "invalid": true,
              }
        }
        name={undefined}
        onBlur={[Function]}
        onChange={undefined}
        onFocus={[Function]}
        placeholder={null}
        store={
            Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(observable): [Function],
              }
        }
        type="text" />
    <InputLabel
        active={false}
        className="input__label"
        errorText={undefined}
        label="Alphanumeric"
        name={undefined} />
</div>,
  "nodes": Array [
    <div
      className="input__container">
      <input
            className="input"
            input={
                  Object {
                        "name": "alphanumeric_name",
                        "value": null,
                      }
            }
            meta={
                  Object {
                        "error": "an error message",
                        "invalid": true,
                      }
            }
            name={undefined}
            onBlur={[Function]}
            onChange={undefined}
            onFocus={[Function]}
            placeholder={null}
            store={
                  Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(observable): [Function],
                      }
            }
            type="text" />
      <InputLabel
            active={false}
            className="input__label"
            errorText={undefined}
            label="Alphanumeric"
            name={undefined} />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <TextInput
        input={
                Object {
                        "name": "alphanumeric_name",
                        "value": null,
                      }
        }
        label="Alphanumeric"
        meta={
                Object {
                        "error": "an error message",
                        "invalid": true,
                      }
        }
        store={
                Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(observable): [Function],
                      }
        } />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": TextInput {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "handleBlur": [Function],
        "handleFocus": [Function],
        "props": Object {
          "input": Object {
            "name": "alphanumeric_name",
            "value": null,
          },
          "label": "Alphanumeric",
          "meta": Object {
            "error": "an error message",
            "invalid": true,
          },
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
        },
        "refs": Object {},
        "state": Object {
          "hasValue": false,
          "isFocused": false,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="input__container">
          <input
                    className="input"
                    input={
                              Object {
                                        "name": "alphanumeric_name",
                                        "value": null,
                                      }
                    }
                    meta={
                              Object {
                                        "error": "an error message",
                                        "invalid": true,
                                      }
                    }
                    name={undefined}
                    onBlur={[Function]}
                    onChange={undefined}
                    onFocus={[Function]}
                    placeholder={null}
                    store={
                              Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      }
                    }
                    type="text" />
          <InputLabel
                    active={false}
                    className="input__label"
                    errorText={undefined}
                    label="Alphanumeric"
                    name={undefined} />
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="input__container">
          <input
                    className="input"
                    input={
                              Object {
                                        "name": "alphanumeric_name",
                                        "value": null,
                                      }
                    }
                    meta={
                              Object {
                                        "error": "an error message",
                                        "invalid": true,
                                      }
                    }
                    name={undefined}
                    onBlur={[Function]}
                    onChange={undefined}
                    onFocus={[Function]}
                    placeholder={null}
                    store={
                              Object {
                                        "dispatch": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                        Symbol(observable): [Function],
                                      }
                    }
                    type="text" />
          <InputLabel
                    active={false}
                    className="input__label"
                    errorText={undefined}
                    label="Alphanumeric"
                    name={undefined} />
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <TextInput
    input={
        Object {
            "name": "alphanumeric_name",
            "value": null,
          }
    }
    label="Alphanumeric"
    meta={
        Object {
            "error": "an error message",
            "invalid": true,
          }
    }
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    } />,
}
`;
