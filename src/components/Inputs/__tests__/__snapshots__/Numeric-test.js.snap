exports[`<Numeric /> should render 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <TextInput
    errorText={undefined}
    isNumericOnly={true}
    label="Numeric"
    name="numeric"
    onKeyDown={[Function]}
    placeholder="Numeric"
    value={null} />,
  "nodes": Array [
    <TextInput
      errorText={undefined}
      isNumericOnly={true}
      label="Numeric"
      name="numeric"
      onKeyDown={[Function]}
      placeholder="Numeric"
      value={null} />,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Numeric
        input={
                Object {
                        "name": "numeric",
                        "value": null,
                      }
        }
        label="Numeric"
        meta={
                Object {
                        "error": "an error message",
                        "invalid": true,
                      }
        }
        store={
                Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(observable): [Function],
                      }
        } />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Numeric {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "handleKeyDown": [Function],
        "props": Object {
          "input": Object {
            "name": "numeric",
            "value": null,
          },
          "label": "Numeric",
          "meta": Object {
            "error": "an error message",
            "invalid": true,
          },
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <TextInput
          errorText={undefined}
          isNumericOnly={true}
          label="Numeric"
          name="numeric"
          onKeyDown={[Function]}
          placeholder="Numeric"
          value={null} />,
        "_debugID": 2,
        "_renderedOutput": <TextInput
          errorText={undefined}
          isNumericOnly={true}
          label="Numeric"
          name="numeric"
          onKeyDown={[Function]}
          placeholder="Numeric"
          value={null} />,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Numeric
    input={
        Object {
            "name": "numeric",
            "value": null,
          }
    }
    label="Numeric"
    meta={
        Object {
            "error": "an error message",
            "invalid": true,
          }
    }
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    } />,
}
`;
